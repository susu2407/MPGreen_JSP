-- MySQL Script generated by MySQL Workbench
-- Thu Sep 11 14:08:02 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema greendae2
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema greendae2
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `greendae2` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin ;
USE `greendae2` ;

-- -----------------------------------------------------
-- Table `greendae2`.`college`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greendae2`.`college` (
  `college` VARCHAR(45) NOT NULL,
  `college_eng_name` VARCHAR(45) NOT NULL,
  `intro_title` VARCHAR(45) NOT NULL,
  `intro_content` VARCHAR(500) NOT NULL,
  `intro_image` LONGBLOB NULL,
  PRIMARY KEY (`college`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greendae2`.`department`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greendae2`.`department` (
  `department_id` INT NOT NULL AUTO_INCREMENT,
  `college` VARCHAR(45) NOT NULL,
  `department_name` VARCHAR(45) NULL,
  `department_eng_name` VARCHAR(45) NULL,
  `founded_year` INT NULL,
  `dean` VARCHAR(45) NULL,
  `contact_phone` VARCHAR(45) NULL,
  `office_location` VARCHAR(45) NULL,
  PRIMARY KEY (`department_id`),
  INDEX `fk_department_college_idx` (`college` ASC) VISIBLE,
  CONSTRAINT `fk_department_college`
    FOREIGN KEY (`college`)
    REFERENCES `greendae2`.`college` (`college`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greendae2`.`professor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greendae2`.`professor` (
  `p_id` INT NOT NULL,
  `id_num` VARCHAR(45) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `e_name` VARCHAR(45) NOT NULL,
  `gender` ENUM('남', '여') NOT NULL,
  `country` VARCHAR(45) NOT NULL,
  `phone` VARCHAR(45) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `postal_code` VARCHAR(45) NOT NULL,
  `addr` VARCHAR(45) NOT NULL,
  `detail_addr` VARCHAR(45) NOT NULL,
  `graduated_university` VARCHAR(45) NOT NULL,
  `academic_field` VARCHAR(45) NOT NULL,
  `graduation_date` VARCHAR(45) NOT NULL,
  `degree` VARCHAR(45) NOT NULL,
  `college_in_charge` VARCHAR(45) NOT NULL,
  `department` INT NOT NULL,
  `hire_date` VARCHAR(45) NOT NULL,
  `p_status` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`p_id`),
  INDEX `fk_professor_department1_idx` (`department` ASC) VISIBLE,
  CONSTRAINT `fk_professor_department1`
    FOREIGN KEY (`department`)
    REFERENCES `greendae2`.`department` (`department_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greendae2`.`course`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greendae2`.`course` (
  `course_code` VARCHAR(45) NOT NULL,
  `college` VARCHAR(45) NOT NULL,
  `completion_type` VARCHAR(45) NOT NULL,
  `department_id` INT NOT NULL,
  `grade` VARCHAR(45) NOT NULL,
  `semester` VARCHAR(45) NOT NULL,
  `credit` VARCHAR(45) NOT NULL,
  `professor` INT NOT NULL,
  `course_name` VARCHAR(45) NOT NULL,
  `course_desc` VARCHAR(45) NOT NULL,
  `class_period` VARCHAR(45) NOT NULL,
  `class_time` VARCHAR(45) NOT NULL,
  `end_time` VARCHAR(45) NOT NULL,
  `class_day` VARCHAR(45) NOT NULL,
  `evaluation_method` VARCHAR(45) NOT NULL,
  `textbook` VARCHAR(45) NOT NULL,
  `classroom` VARCHAR(45) NOT NULL,
  `max_capacity` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`course_code`),
  INDEX `fk_COURSE_department1_idx` (`department_id` ASC) VISIBLE,
  INDEX `fk_COURSE_professor1_idx` (`professor` ASC) VISIBLE,
  CONSTRAINT `fk_COURSE_department1`
    FOREIGN KEY (`department_id`)
    REFERENCES `greendae2`.`department` (`department_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_COURSE_professor1`
    FOREIGN KEY (`professor`)
    REFERENCES `greendae2`.`professor` (`p_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greendae2`.`student`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greendae2`.`student` (
  `s_id` VARCHAR(13) NOT NULL,
  `id_num` VARCHAR(45) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `e_name` VARCHAR(45) NOT NULL,
  `gender` ENUM('남', '여') NOT NULL,
  `country` VARCHAR(45) NOT NULL,
  `phone` VARCHAR(45) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `postal_code` VARCHAR(45) NOT NULL,
  `addr` VARCHAR(45) NOT NULL,
  `detail_addr` VARCHAR(45) NOT NULL,
  `admission_year` VARCHAR(45) NOT NULL,
  `graduation_year` VARCHAR(45) NOT NULL,
  `admission_type` VARCHAR(45) NOT NULL,
  `college` VARCHAR(45) NOT NULL,
  `department` INT NOT NULL,
  `admission_grade` INT NOT NULL,
  `admission_semester` INT NOT NULL,
  `advisor` INT NOT NULL,
  `s_status` VARCHAR(45) NULL,
  PRIMARY KEY (`s_id`),
  INDEX `fk_student_professor1_idx` (`advisor` ASC) VISIBLE,
  INDEX `fk_student_department1_idx` (`department` ASC) VISIBLE,
  CONSTRAINT `fk_student_professor1`
    FOREIGN KEY (`advisor`)
    REFERENCES `greendae2`.`professor` (`p_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_student_department1`
    FOREIGN KEY (`department`)
    REFERENCES `greendae2`.`department` (`department_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greendae2`.`grade`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greendae2`.`grade` (
  `g_num` INT NOT NULL AUTO_INCREMENT,
  `student_s_id` VARCHAR(13) NULL,
  `c_code` VARCHAR(45) NULL,
  `per_score` DECIMAL(3,1) NULL,
  `c_rank` VARCHAR(45) NULL,
  `score` DECIMAL(2,1) NULL,
  INDEX `fk_grade_COURSE1_idx` (`c_code` ASC) VISIBLE,
  INDEX `fk_grade_student1_idx` (`student_s_id` ASC) VISIBLE,
  PRIMARY KEY (`g_num`),
  CONSTRAINT `fk_grade_COURSE1`
    FOREIGN KEY (`c_code`)
    REFERENCES `greendae2`.`course` (`course_code`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_grade_student1`
    FOREIGN KEY (`student_s_id`)
    REFERENCES `greendae2`.`student` (`s_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greendae2`.`cou_req`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greendae2`.`cou_req` (
  `cou_num` INT NOT NULL AUTO_INCREMENT,
  `c_id` VARCHAR(45) NOT NULL,
  `s_id` VARCHAR(13) NOT NULL,
  PRIMARY KEY (`cou_num`),
  INDEX `fk_cou_req_COURSE1_idx` (`c_id` ASC) VISIBLE,
  INDEX `fk_cou_req_student1_idx` (`s_id` ASC) VISIBLE,
  CONSTRAINT `fk_cou_req_COURSE1`
    FOREIGN KEY (`c_id`)
    REFERENCES `greendae2`.`course` (`course_code`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cou_req_student1`
    FOREIGN KEY (`s_id`)
    REFERENCES `greendae2`.`student` (`s_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greendae2`.`fnq`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greendae2`.`fnq` (
  `category` INT NOT NULL,
  `number` INT NOT NULL,
  `title` VARCHAR(45) NULL,
  `content` VARCHAR(500) NULL,
  PRIMARY KEY (`category`, `number`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greendae2`.`cboard`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greendae2`.`cboard` (
  `board_id` BIGINT NOT NULL AUTO_INCREMENT,
  `category` ENUM('notice', 'news', 'jobs', 'free', 'qna', 'data', 'ad_notice', 'ac_notice', 'consult') NOT NULL,
  `title` VARCHAR(255) NOT NULL,
  `content` TEXT NOT NULL,
  `writer_type` ENUM('info', 'student', 'professor') NOT NULL,
  `writer_id` VARCHAR(50) NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `view_count` INT NOT NULL DEFAULT 0,
  `news_type` ENUM('news', 'column') NULL,
  `is_secret` TINYINT NULL DEFAULT 0,
  `qna_status` ENUM('WAIT', 'DONE') NULL,
  `answer_content` TEXT NULL,
  PRIMARY KEY (`board_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greendae2`.`cboard_comment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greendae2`.`cboard_comment` (
  `comment_id` INT NOT NULL AUTO_INCREMENT,
  `board_id` BIGINT NOT NULL,
  `writer_type` ENUM('info', 'student', 'professor') NULL,
  `writer_id` VARCHAR(50) NOT NULL,
  `content` TEXT NOT NULL,
  `created_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`comment_id`),
  INDEX `fk_cbaord_comment_cboard1_idx` (`board_id` ASC) VISIBLE,
  CONSTRAINT `fk_cbaord_comment_cboard1`
    FOREIGN KEY (`board_id`)
    REFERENCES `greendae2`.`cboard` (`board_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greendae2`.`cboard_file`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greendae2`.`cboard_file` (
  `file_id` INT NOT NULL AUTO_INCREMENT,
  `board_id` BIGINT NOT NULL,
  `file_name` VARCHAR(255) NOT NULL,
  `file_path` VARCHAR(500) NOT NULL,
  `file_size` BIGINT NULL,
  `created_at` VARCHAR(45) NULL DEFAULT 'CURRENT_TIMESTAMP',
  PRIMARY KEY (`file_id`),
  INDEX `fk_cboard_file_cboard1_idx` (`board_id` ASC) VISIBLE,
  CONSTRAINT `fk_cboard_file_cboard1`
    FOREIGN KEY (`board_id`)
    REFERENCES `greendae2`.`cboard` (`board_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greendae2`.`terms`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greendae2`.`terms` (
  `NO` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(255) NOT NULL,
  `content` TIME NOT NULL,
  PRIMARY KEY (`NO`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greendae2`.`uuser`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greendae2`.`uuser` (
  `u_id` VARCHAR(10) NOT NULL,
  `pass` VARCHAR(16) NOT NULL,
  `uname` VARCHAR(45) NOT NULL,
  `phone` VARCHAR(45) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `postal_code` VARCHAR(45) NULL,
  `addr` VARCHAR(45) NULL,
  `detail_addr` VARCHAR(45) NULL,
  `created_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`u_id`),
  UNIQUE INDEX `phone_UNIQUE` (`phone` ASC) VISIBLE,
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE)
ENGINE = InnoDB;

USE `greendae2`;

DELIMITER $$
USE `greendae2`$$
CREATE DEFINER = CURRENT_USER TRIGGER `professor_BEFORE_INSERT` BEFORE INSERT ON `professor` FOR EACH ROW
BEGIN
    DECLARE current_year VARCHAR(4);
    DECLARE next_sequence INT;
    DECLARE department_code VARCHAR(3);

    -- 1. 현재 연도 구하기
    SET current_year = YEAR(CURDATE());

    -- 2. 학과 코드를 2자리로 맞추기 (예: 1 -> '01', 10 -> '10')
    SET department_code = LPAD(NEW.department, 2, '0');
    
    -- 3. 다음 순번 구하기
    SELECT IFNULL(MAX(CAST(SUBSTRING(p_id, 9) AS UNSIGNED)), 0) + 1 INTO next_sequence
    FROM professor
    WHERE p_id LIKE CONCAT(current_year, department_code, '%');

    -- 4. p_id 값 조합 및 할당
    SET NEW.p_id = CONCAT(current_year, department_code, LPAD(next_sequence, 4, '0'));
END$$

USE `greendae2`$$
CREATE DEFINER = CURRENT_USER TRIGGER `course_BEFORE_INSERT` BEFORE INSERT ON `course` FOR EACH ROW
BEGIN
    -- 필요한 변수들을 선언
    DECLARE current_year VARCHAR(4);
    DECLARE department_part VARCHAR(2);
    DECLARE semester_part VARCHAR(2);
    DECLARE code_prefix VARCHAR(8); -- 연도(4) + 학과(2) + 학기(2) = 8자리
    DECLARE next_sequence INT;

    -- 1. 현재 연도 구하기
    SET current_year = YEAR(CURDATE());

    -- 2. 학과 ID를 2자리로 맞추기 (예: 1 -> '01')
    --    (실제 컬럼명이 department_id가 아니라면 이 부분을 수정해주세요)
    SET department_part = LPAD(NEW.department_id, 2, '0');

    -- 3. 학기 정보를 2자리로 맞추기 (예: 1 -> '01')
    --    (실제 컬럼명이 semester가 아니라면 이 부분을 수정해주세요)
    SET semester_part = LPAD(NEW.semester, 2, '0');

    -- 4. course_code의 접두사(prefix) 조합
    SET code_prefix = CONCAT(current_year, department_part, semester_part);

    -- 5. 다음 순번 구하기
    --    - 동일한 접두사를 가진 course_code의 마지막 4자리를 숫자로 변환하여 최댓값을 찾음
    --    - 만약 해당하는 코드가 없으면(NULL이면) 0을 반환하고, 1을 더해 1부터 시작
    SELECT IFNULL(MAX(CAST(SUBSTRING(course_code, 9) AS UNSIGNED)), 0) + 1 INTO next_sequence
    FROM course
    WHERE course_code LIKE CONCAT(code_prefix, '%');

    -- 6. 최종 course_code 값을 조합하여 할당
    --    - 예: 2025 + 01 + 01 + 0001  -> '202501010001'
    SET NEW.course_code = CONCAT(code_prefix, LPAD(next_sequence, 4, '0'));
END$$

USE `greendae2`$$
CREATE DEFINER=CURRENT_USER TRIGGER `student_BEFORE_INSERT` BEFORE INSERT ON `student` FOR EACH ROW
BEGIN
    DECLARE current_year VARCHAR(4);
    DECLARE next_sequence INT;
    DECLARE department_code VARCHAR(3);

    -- 1. 현재 연도 구하기
    SET current_year = YEAR(CURDATE());

    -- 2. 학과 코드를 2자리로 맞추기 (예: 1 -> '01', 10 -> '10')
    SET department_code = LPAD(NEW.department, 2, '0');

    -- 3. 다음 순번 구하기
    --    - `LIKE` 조건에 'S'를 추가하여 정확한 학번 형식 검색
    --    - `SUBSTRING` 인덱스를 9로 수정하여 올바른 순번 위치 지정
    SELECT IFNULL(MAX(CAST(SUBSTRING(s_id, 9) AS UNSIGNED)), 0) + 1 INTO next_sequence
    FROM student
    WHERE s_id LIKE CONCAT(current_year, department_code, '%');

    -- 4. s_id 값 조합 및 할당
    SET NEW.s_id = CONCAT(current_year, department_code, LPAD(next_sequence, 4, '0'));
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
