-- MySQL Script generated by MySQL Workbench
-- Tue Sep  9 15:52:12 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema green2
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `green2` ;

-- -----------------------------------------------------
-- Schema green2
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `green2` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin ;
USE `green2` ;

-- -----------------------------------------------------
-- Table `college`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `college` ;

CREATE TABLE IF NOT EXISTS `college` (
  `college` VARCHAR(45) NOT NULL,
  `college_eng_name` VARCHAR(45) NOT NULL,
  `intro_title` VARCHAR(45) NOT NULL,
  `intro_content` VARCHAR(500) NOT NULL,
  `intro_image` LONGBLOB NULL,
  PRIMARY KEY (`college`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `department`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `department` ;

CREATE TABLE IF NOT EXISTS `department` (
  `department_id` INT NOT NULL AUTO_INCREMENT,
  `college` VARCHAR(45) NOT NULL,
  `department_name` VARCHAR(45) NULL,
  `department_eng_name` VARCHAR(45) NULL,
  `founded_year` INT NULL,
  `dean` VARCHAR(45) NULL,
  `contact_phone` VARCHAR(45) NULL,
  `office_location` VARCHAR(45) NULL,
  PRIMARY KEY (`department_id`),
  INDEX `fk_department_college_idx` (`college` ASC) VISIBLE,
  CONSTRAINT `fk_department_college`
    FOREIGN KEY (`college`)
    REFERENCES `college` (`college`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `professor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `professor` ;

CREATE TABLE IF NOT EXISTS `professor` (
  `p_id` INT NOT NULL,
  `id_num` VARCHAR(45) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `e_name` VARCHAR(45) NOT NULL,
  `gender` ENUM('남', '여') NOT NULL,
  `country` VARCHAR(45) NOT NULL,
  `phone` VARCHAR(45) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `postal_code` VARCHAR(45) NOT NULL,
  `addr` VARCHAR(45) NOT NULL,
  `detail_addr` VARCHAR(45) NOT NULL,
  `graduated_university` VARCHAR(45) NOT NULL,
  `academic_field` VARCHAR(45) NOT NULL,
  `graduation_date` VARCHAR(45) NOT NULL,
  `degree` VARCHAR(45) NOT NULL,
  `college_in_charge` VARCHAR(45) NOT NULL,
  `department` INT NOT NULL,
  `hire_date` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`p_id`),
  INDEX `fk_professor_department1_idx` (`department` ASC) VISIBLE,
  CONSTRAINT `fk_professor_department1`
    FOREIGN KEY (`department`)
    REFERENCES `department` (`department_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `COURSE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `COURSE` ;

CREATE TABLE IF NOT EXISTS `COURSE` (
  `course_code` INT NOT NULL,
  `college` VARCHAR(45) NOT NULL,
  `completion_type` VARCHAR(45) NOT NULL,
  `department_id` INT NOT NULL,
  `grade` VARCHAR(45) NOT NULL,
  `semester` VARCHAR(45) NOT NULL,
  `credit` VARCHAR(45) NOT NULL,
  `professor` INT NOT NULL,
  `course_name` VARCHAR(45) NOT NULL,
  `course_desc` VARCHAR(45) NOT NULL,
  `class_period` VARCHAR(45) NOT NULL,
  `class_time` VARCHAR(45) NOT NULL,
  `class_day` VARCHAR(45) NOT NULL,
  `evaluation_method` VARCHAR(45) NOT NULL,
  `textbook` VARCHAR(45) NOT NULL,
  `classroom` VARCHAR(45) NOT NULL,
  `max_capacity` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`course_code`),
  INDEX `fk_COURSE_department1_idx` (`department_id` ASC) VISIBLE,
  INDEX `fk_COURSE_professor1_idx` (`professor` ASC) VISIBLE,
  CONSTRAINT `fk_COURSE_department1`
    FOREIGN KEY (`department_id`)
    REFERENCES `department` (`department_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_COURSE_professor1`
    FOREIGN KEY (`professor`)
    REFERENCES `professor` (`p_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `student`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `student` ;

CREATE TABLE IF NOT EXISTS `student` (
  `s_id` VARCHAR(13) NOT NULL,
  `id_num` VARCHAR(45) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `e_name` VARCHAR(45) NOT NULL,
  `gender` ENUM('남', '여') NOT NULL,
  `country` VARCHAR(45) NOT NULL,
  `phone` VARCHAR(45) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `postal_code` VARCHAR(45) NOT NULL,
  `addr` VARCHAR(45) NOT NULL,
  `detail_addr` VARCHAR(45) NOT NULL,
  `admission_year` VARCHAR(45) NOT NULL,
  `graduation_year` VARCHAR(45) NOT NULL,
  `admission_type` VARCHAR(45) NOT NULL,
  `college` VARCHAR(45) NOT NULL,
  `department` INT NOT NULL,
  `admission_grade` INT NOT NULL,
  `admission_semester` INT NOT NULL,
  `advisor` INT NOT NULL,
  `status` VARCHAR(45) NULL,
  PRIMARY KEY (`s_id`),
  INDEX `fk_student_professor1_idx` (`advisor` ASC) VISIBLE,
  INDEX `fk_student_department1_idx` (`department` ASC) VISIBLE,
  CONSTRAINT `fk_student_professor1`
    FOREIGN KEY (`advisor`)
    REFERENCES `professor` (`p_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_student_department1`
    FOREIGN KEY (`department`)
    REFERENCES `department` (`department_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `grade`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `grade` ;

CREATE TABLE IF NOT EXISTS `grade` (
  `student_s_id` VARCHAR(13) NOT NULL,
  `c_code` INT NOT NULL,
  `per_score` DECIMAL(3,1) NULL,
  `rank` VARCHAR(45) NULL,
  `score` DECIMAL(2,1) NULL,
  INDEX `fk_grade_COURSE1_idx` (`c_code` ASC) VISIBLE,
  INDEX `fk_grade_student1_idx` (`student_s_id` ASC) VISIBLE,
  PRIMARY KEY (`student_s_id`),
  CONSTRAINT `fk_grade_COURSE1`
    FOREIGN KEY (`c_code`)
    REFERENCES `COURSE` (`course_code`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_grade_student1`
    FOREIGN KEY (`student_s_id`)
    REFERENCES `student` (`s_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `green2`;

DELIMITER $$

USE `green2`$$
DROP TRIGGER IF EXISTS `professor_BEFORE_INSERT_WRONG_SCHEMA` $$
USE `green2`$$
CREATE DEFINER = CURRENT_USER TRIGGER `green2`.`professor_BEFORE_INSERT` BEFORE INSERT ON `professor` FOR EACH ROW
BEGIN
    DECLARE current_year VARCHAR(4);
    DECLARE next_sequence INT;

    -- 1. 현재 연도 구하기
    SET current_year = YEAR(CURDATE());

    -- 2. 학과코드는 NEW.department 에서 직접 가져온다고 가정
    -- (professor 테이블에 department_id 컬럼이 있어야 함)
    
    -- 3. 다음 순번 구하기
    SELECT IFNULL(MAX(CAST(SUBSTRING(p_id, 9) AS UNSIGNED)), 0) + 1 INTO next_sequence
    FROM professor
    WHERE p_id LIKE CONCAT(current_year, NEW.department, '%');

    -- 4. s_id 값 조합 및 할당
    SET NEW.p_id = CONCAT(current_year, NEW.department, LPAD(next_sequence, 4, '0'));
END$$


USE `green2`$$
DROP TRIGGER IF EXISTS `student_BEFORE_INSERT` $$
USE `green2`$$
CREATE DEFINER = CURRENT_USER TRIGGER `green2`.`student_BEFORE_INSERT` BEFORE INSERT ON `student` FOR EACH ROW
BEGIN
    DECLARE current_year VARCHAR(4);
    DECLARE next_sequence INT;

    -- 1. 현재 연도 구하기
    SET current_year = YEAR(CURDATE());

    -- 2. 학과코드는 NEW.department 에서 직접 가져온다고 가정
    -- (student 테이블에 department 컬럼이 있어야 함)
    
    -- 3. 다음 순번 구하기
    SELECT IFNULL(MAX(CAST(SUBSTRING(s_id, 9) AS UNSIGNED)), 0) + 1 INTO next_sequence
    FROM student
    WHERE s_id LIKE CONCAT(current_year, NEW.department, '%');

    -- 4. s_id 값 조합 및 할당
    SET NEW.s_id = CONCAT(current_year, NEW.department, LPAD(next_sequence, 4, '0'));
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
SET FOREIGN_KEY_CHECKS = 1;